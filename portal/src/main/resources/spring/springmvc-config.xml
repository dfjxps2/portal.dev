<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" 
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd"
       default-lazy-init="true">
       
	   <bean id="configTool" class="com.quick.core.util.config.ConfigTool">
        <property name="locations">
            <list>
                <value>classpath:/properties/config.properties</value>
            </list>
        </property>
    </bean>
    
    <!--MVC-->
    <!-- COC通用映射 -->
    <!--<bean class="org.springframework.web.servlet.mvc.support.ControllerClassNameHandlerMapping" />-->
    <!--Spring3.1版本开始的注解 HandlerMapping -->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>-->
    <bean name='handlerMapping' class='com.quick.core.base.spring.MethodRequestMappingHandlerMapping' />
    <!--Spring3.1版本开始的注解 HandlerAdapter -->
     <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
			   <bean class="org.springframework.http.converter.StringHttpMessageConverter" /> 
			   <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="objectMapper">
                        <bean class="com.fasterxml.jackson.databind.ObjectMapper">
                             <property name="dateFormat">
                                  <bean class="java.text.SimpleDateFormat">
                                      <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
                                  </bean>
                             </property>
                        </bean>
                    </property>
                    <property name="supportedMediaTypes">
                        <list>
                            <value>application/json;charset=UTF-8</value>
                            <value>text/json;charset=UTF-8</value>
                            <value>text/plain;charset=UTF-8</value>
                            <value>text/html;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>
	  
	  
    
    <!-- 默认的注解映射的支持(注册RequestMappingHandlerMapping和RequestMappingHandlerAdapter) --> 
    <!--<mvc:annotation-driven />-->
    <!-- 自动扫描且只扫描Controller -->
    <context:component-scan base-package="com.quick,com.seaboxdata" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <context:component-scan base-package="org.pac4j.springframework.web"/>
    <context:component-scan base-package="com.seaboxdata.portal.auth"/>

    <bean id="formClient" class="org.pac4j.http.client.indirect.FormClient">
        <constructor-arg name="loginUrl" value="${portal.form}"/>
        <constructor-arg name="usernamePasswordAuthenticator" ref="testAuthenticator"/>
        <property name="authorizationGenerator" ref="dbAuthGenerator"/>
    </bean>

    <bean id="indirectBasicAuthClient" class="org.pac4j.http.client.indirect.IndirectBasicAuthClient">
        <constructor-arg name="usernamePasswordAuthenticator" ref="testAuthenticator"/>
    </bean>

    <bean id="casConfiguration" class="org.pac4j.cas.config.CasConfiguration">
        <property name="loginUrl" value="${sso.cas.server.loginUrl}"/>
        <property name="prefixUrl" value="${sso.cas.server.prefixUrl}"/>
    </bean>

    <bean id="casRestBasicAuthClient" class="org.pac4j.cas.client.rest.CasRestBasicAuthClient">
        <constructor-arg name="headerName" value="Authorization"/>
        <constructor-arg name="prefixHeader" value="Basic "/>
        <constructor-arg name="configuration" ref="casConfiguration"/>
        <property name="authorizationGenerator" ref="dbAuthGenerator"/>
    </bean>

    <bean id="myCasRestBasicAuthClient" class="com.seaboxdata.portal.auth.MyCasRestBasicAuthClient">
        <constructor-arg name="headerName" value="Authorization"/>
        <constructor-arg name="prefixHeader" value="Basic "/>
        <constructor-arg name="configuration" ref="casConfiguration"/>
        <property name="authorizationGenerator" ref="dbAuthGenerator"/>
    </bean>

    <bean id="casClient" class="org.pac4j.cas.client.CasClient">
        <constructor-arg name="configuration" ref="casConfiguration"/>
        <property name="authorizationGenerator" ref="dbAuthGenerator"/>
    </bean>

    <bean id="secretSignatureConfiguration" class="org.pac4j.jwt.config.signature.SecretSignatureConfiguration">
        <constructor-arg name="secret" value="${salt}"/>
    </bean>

    <bean id="secretEncryptionConfiguration" class="org.pac4j.jwt.config.encryption.SecretEncryptionConfiguration">
        <constructor-arg name="secret" value="${salt}"/>
    </bean>

    <bean id="parameterClient" class="org.pac4j.http.client.direct.ParameterClient">
        <constructor-arg name="parameterName" value="token"/>
        <constructor-arg name="tokenAuthenticator">
            <bean class="org.pac4j.jwt.credentials.authenticator.JwtAuthenticator">
                <property name="signatureConfiguration" ref="secretSignatureConfiguration"/>
                <property name="encryptionConfiguration" ref="secretEncryptionConfiguration"/>
            </bean>
        </constructor-arg>
        <property name="supportGetRequest" value="true"/>
        <property name="supportPostRequest" value="false"/>
    </bean>

    <bean id="clients" class="org.pac4j.core.client.Clients">
        <constructor-arg name="callbackUrl" value="${portal.callback}"/>
        <constructor-arg name="clients">
            <list>
                <ref bean="formClient"/>
                <ref bean="casClient"/>
                <ref bean="parameterClient"/>
                <ref bean="casRestBasicAuthClient"/>
                <ref bean="myCasRestBasicAuthClient"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="authorizeInfoMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="mapperInterface" value="com.seaboxdata.portal.auth.mapper.AuthorizeInfoMapper" />
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

    <bean id="dbAuthGenerator" class="com.seaboxdata.portal.auth.DBAuthGenerator">
        <property name="authorizeInfoMapper" ref="authorizeInfoMapper"/>
    </bean>

    <bean id="testAuthenticator"
          class="org.pac4j.http.credentials.authenticator.test.SimpleTestUsernamePasswordAuthenticator">
    </bean>

    <bean id="mySecurityLogic" class="com.seaboxdata.portal.auth.MySecurityLogic"/>

    <bean id="config" class="org.pac4j.core.config.Config">
        <constructor-arg name="clients" ref="clients"/>
    </bean>


    <!-- 拦截器 -->
    <mvc:interceptors>
        <mvc:interceptor>
           <mvc:mapping path="/login"/>
           <bean class="org.pac4j.springframework.web.SecurityInterceptor">
                <constructor-arg name="config" ref="config"/>
                <constructor-arg name="clients" value="FormClient"/>
           </bean>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/callback/**"/>
            <mvc:exclude-mapping path="/mobile/**"/>
            <mvc:exclude-mapping path="/upload/**"/>
            <bean class="org.pac4j.springframework.web.SecurityInterceptor">
                <constructor-arg name="config" ref="config"/>
                <constructor-arg name="clients" value="CasClient"/>
            </bean>
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/mobile/login"/>
		     <bean class="org.pac4j.springframework.web.SecurityInterceptor">
                <constructor-arg name="config" ref="config"/>
                <constructor-arg name="clients" value="MyCasRestBasicAuthClient"/>
                <property name="securityLogic" ref="mySecurityLogic"/>
            </bean>
        </mvc:interceptor>
        
         <mvc:interceptor>
            <mvc:mapping path="/mobile/**"/>
            <mvc:exclude-mapping path="/mobile/login"/>
            <bean class="com.seaboxdata.portal.mobile.filter.MobileBaseInterceptor" />
        </mvc:interceptor>
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/callback/**"/>
            <mvc:exclude-mapping path="/mobile/**"/>
            <bean class="com.quick.core.util.filter.ControllerBaseInterceptor" />
        </mvc:interceptor>
    </mvc:interceptors>
    

    <!--样式资源目录-->
    <mvc:resources location="/res/" mapping="/res/**"/>
    <mvc:resources location="/upload/" mapping="/upload/**"/>
    
    <!-- 对模型视图名称的解析，即在模型视图名称添加前后缀 -->  
    <!-- 设置freeMarker的配置文件路径 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value=""/>
        <property name="freemarkerSettings">
            <props>
                <prop key="tag_syntax">auto_detect</prop>
                <prop key="template_update_delay">5</prop>
                <prop key="defaultEncoding">UTF-8</prop>
                <prop key="url_escaping_charset">UTF-8</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="boolean_format">true,false</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="time_format">HH:mm:ss</prop>
                <prop key="number_format">0.######</prop>
                <prop key="whitespace_stripping">true</prop>
                <!--空值处理<prop key="classic_compatible">true</prop>-->				
            </props>
        </property>
    </bean>
    <!-- 配置freeMarker视图解析器 -->
    <!-- FreeMarker视图解析 如返回student。。在这里配置后缀名ftl和视图解析器。。-->  
    <bean id="viewResolver"  class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">     
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="prefix" value="/WEB-INF/"/>   
        <property name="suffix" value=".html" />  
        <property name="contentType" value="text/html;charset=utf-8" />  <!-- 模板输出内容编码，此处应与defaultEncoding保持一致 -->
        <property name="exposeRequestAttributes" value="true" />  <!-- 允许访问请求属性，默认为false -->
        <property name="exposeSessionAttributes" value="true" />  <!-- 允许访问会话属性，默认为false -->
        <property name="exposeSpringMacroHelpers" value="true" />  
        <property name="requestContextAttribute" value="rc" /> <!-- 页面上下文，类似于request.contextPath -->
    </bean>
    
    <!-- 配置multipart解析器（多文件上传） -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- set the max upload size100MB -->
        <property name="maxUploadSize" value="104857600" />
        <property name="defaultEncoding" value="utf-8" />
        <property name="maxInMemorySize" value="10240" />
    </bean>
    
    <!--定义异常处理页面-->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <!--<property name="exceptionMappings">
            <props>
                <prop key="java.sql.SQLException">outException</prop>
                <prop key="java.io.IOException">outException</prop>
            </props>
        </property>-->
    </bean>

    <!--<context:annotation-config/>   -->
</beans>

